import os
import hashlib
import magic
import pefile
import json
import time

# Configure directories
SAMPLES_DIR = "samples"  # Directory containing malware samples
REPORTS_DIR = "reports"  # Directory where reports will be saved
os.makedirs(REPORTS_DIR, exist_ok=True)

def calculate_hash(file_path, hash_type="md5"):
    """Calculate the hash of a file (MD5, SHA1, SHA256)."""
    hash_func = hashlib.new(hash_type)
    with open(file_path, 'rb') as f:
        while chunk := f.read(4096):
            hash_func.update(chunk)
    return hash_func.hexdigest()

def get_file_type(file_path):
    """Get the MIME type of the file."""
    return magic.from_file(file_path, mime=True)

def extract_metadata(file_path):
    """Extract metadata from a PE file."""
    try:
        pe = pefile.PE(file_path)
        metadata = {
            "Number of Sections": len(pe.sections),
            "Entry Point": hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint),
            "Image Base": hex(pe.OPTIONAL_HEADER.ImageBase),
            "Sections": [
                {
                    "Name": section.Name.decode('utf-8').strip(),
                    "Virtual Address": hex(section.VirtualAddress),
                    "Size of Raw Data": section.SizeOfRawData
                } for section in pe.sections
            ]
        }
    except pefile.PEFormatError:
        metadata = {"Error": "Not a valid PE file"}
    return metadata

def analyze_file(file_path):
    """Analyze a single file for malware characteristics."""
    print(f"Analyzing file: {file_path}")
    analysis_data = {}
    
    # Calculate hashes
    analysis_data["MD5"] = calculate_hash(file_path, "md5")
    analysis_data["SHA1"] = calculate_hash(file_path, "sha1")
    analysis_data["SHA256"] = calculate_hash(file_path, "sha256")

    # Get file type
    analysis_data["File Type"] = get_file_type(file_path)

    # Extract metadata if it's a PE file
    analysis_data["Metadata"] = extract_metadata(file_path)

    return analysis_data

def generate_report(file_path, analysis_data):
    """Generate a JSON report for the analyzed file."""
    report_path = os.path.join(REPORTS_DIR, f"{os.path.basename(file_path)}_report.json")
    with open(report_path, "w") as report_file:
        json.dump(analysis_data, report_file, indent=4)
    print(f"Report saved: {report_path}")

def main():
    """Main function to run the malware analysis on all files in the sample directory."""
    sample_files = [os.path.join(SAMPLES_DIR, f) for f in os.listdir(SAMPLES_DIR) if os.path.isfile(os.path.join(SAMPLES_DIR, f))]
    
    for file_path in sample_files:
        try:
            analysis_data = analyze_file(file_path)
            generate_report(file_path, analysis_data)
            time.sleep(1)  # Add delay to avoid overloading system
        except Exception as e:
            print(f"Error analyzing {file_path}: {e}")

if __name__ == "__main__":
    main()
